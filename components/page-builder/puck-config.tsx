import { Config, ComponentConfig } from '@measured/puck';
import { HeadingBlockRenderer } from './blocks/heading-block';
import { TextBlockRenderer } from './blocks/text-block';
import { ImageBlockRenderer } from './blocks/image-block';
import { VideoBlockRenderer } from './blocks/video-block';
import { ButtonBlockRenderer } from './blocks/button-block';
import { SpacerBlockRenderer } from './blocks/spacer-block';
import { HeroBlockRenderer } from './blocks/hero-block';
import { HtmlBlockRenderer } from './blocks/html-block';
import { ColumnsBlockRenderer } from './blocks/columns-block';
import { GalleryBlockRenderer } from './blocks/gallery-block';
import { CardBlockRenderer } from './blocks/card-block';
import { FormBlockRenderer } from './blocks/form-block';

// Puck Ïª¥Ìè¨ÎÑåÌä∏ Ïñ¥ÎåëÌÑ∞: Í∏∞Ï°¥ Î∏îÎ°ùÏùÑ Puck Ïª¥Ìè¨ÎÑåÌä∏Î°ú Î≥ÄÌôò
const HeadingComponent: ComponentConfig<{
  text: string;
  level: 1 | 2 | 3 | 4 | 5 | 6;
  fontSize?: number;
  color?: string;
  letterSpacing?: number;
  lineHeight?: number;
  fontWeight?: number;
  textAlign?: string;
}> = {
  fields: {
    text: { type: "text", label: "üìù Ï†úÎ™© ÌÖçÏä§Ìä∏" },
    level: { 
      type: "select", 
      label: "üìä Ï†úÎ™© Î†àÎ≤®",
      options: [
        { label: "H1 - Í∞ÄÏû• ÌÅ∞ Ï†úÎ™©", value: 1 },
        { label: "H2 - ÌÅ∞ Ï†úÎ™©", value: 2 },
        { label: "H3 - Ï§ëÍ∞Ñ Ï†úÎ™©", value: 3 },
        { label: "H4 - ÏûëÏùÄ Ï†úÎ™©", value: 4 },
        { label: "H5 - Îçî ÏûëÏùÄ Ï†úÎ™©", value: 5 },
        { label: "H6 - Í∞ÄÏû• ÏûëÏùÄ Ï†úÎ™©", value: 6 },
      ]
    },
    fontSize: { 
      type: "number",
      label: "üìè Ìè∞Ìä∏ ÌÅ¨Í∏∞ (px)",
      min: 12,
      max: 84
    },
    color: { 
      type: "text", 
      label: "üé® ÌÖçÏä§Ìä∏ ÏÉâÏÉÅ",
      placeholder: "#000000"
    },
    letterSpacing: {
      type: "number",
      label: "üìê ÏûêÍ∞Ñ (px)",
      min: -3,
      max: 8,
      step: 0.1
    },
    lineHeight: {
      type: "number", 
      label: "üìè ÌñâÍ∞Ñ",
      min: 1.0,
      max: 2.5,
      step: 0.1
    },
    fontWeight: {
      type: "select",
      label: "üí™ ÍµµÍ∏∞",
      options: [
        { label: "ÏñáÍ≤å (100)", value: 100 },
        { label: "Ïó∞ÌïòÍ≤å (300)", value: 300 },
        { label: "Î≥¥ÌÜµ (400)", value: 400 },
        { label: "Ï§ÄÍµµÍ≤å (600)", value: 600 },
        { label: "ÍµµÍ≤å (700)", value: 700 },
        { label: "Îß§Ïö∞ÍµµÍ≤å (900)", value: 900 }
      ]
    },
    textAlign: {
      type: "radio",
      label: "üìç Ï†ïÎ†¨",
      options: [
        { label: "‚¨ÖÔ∏è ÏôºÏ™Ω", value: "left" },
        { label: "üéØ Í∞ÄÏö¥Îç∞", value: "center" },
        { label: "‚û°Ô∏è Ïò§Î•∏Ï™Ω", value: "right" }
      ]
    }
  },
  defaultProps: {
    text: "ÏÉà Ï†úÎ™©",
    level: 2,
    fontSize: 32,
    color: "#000000",
    letterSpacing: 0,
    lineHeight: 1.2,
    fontWeight: 700,
    textAlign: "left"
  },
  render: ({ text, level, fontSize, color, letterSpacing, lineHeight, fontWeight, textAlign }) => {
    const block = {
      id: 'puck-heading',
      type: 'heading',
      content: { 
        text, 
        level, 
        fontSize: fontSize?.toString(), 
        color, 
        letterSpacing: letterSpacing?.toString(), 
        lineHeight: lineHeight?.toString(), 
        fontWeight: fontWeight?.toString(), 
        textAlign 
      }
    } as any;
    
    return <HeadingBlockRenderer block={block} isEditing={false} />;
  }
};

const TextComponent: ComponentConfig<{
  text: string;
  format?: 'plain' | 'markdown';
  fontSize?: number;
  color?: string;
  letterSpacing?: number;
  lineHeight?: number;
  fontWeight?: number;
  textAlign?: string;
}> = {
  fields: {
    text: { type: "textarea", label: "üìù ÌÖçÏä§Ìä∏ ÎÇ¥Ïö©" },
    format: {
      type: "radio",
      label: "üìÑ ÌòïÏãù",
      options: [
        { label: "ÏùºÎ∞ò ÌÖçÏä§Ìä∏", value: "plain" },
        { label: "ÎßàÌÅ¨Îã§Ïö¥", value: "markdown" }
      ]
    },
    fontSize: { 
      type: "number",
      label: "üìè Ìè∞Ìä∏ ÌÅ¨Í∏∞ (px)",
      min: 8,
      max: 72
    },
    color: { 
      type: "text", 
      label: "üé® ÌÖçÏä§Ìä∏ ÏÉâÏÉÅ",
      placeholder: "#000000"
    },
    letterSpacing: {
      type: "number",
      label: "üìê ÏûêÍ∞Ñ (px)", 
      min: -5,
      max: 10,
      step: 0.1
    },
    lineHeight: {
      type: "number",
      label: "üìè ÌñâÍ∞Ñ",
      min: 1.0,
      max: 3.0,
      step: 0.1
    },
    fontWeight: {
      type: "select",
      label: "üí™ ÍµµÍ∏∞",
      options: [
        { label: "ÏñáÍ≤å (100)", value: 100 },
        { label: "Ïó∞ÌïòÍ≤å (300)", value: 300 },
        { label: "Î≥¥ÌÜµ (400)", value: 400 },
        { label: "Ï§ëÍ∞Ñ (500)", value: 500 },
        { label: "Ï§ÄÍµµÍ≤å (600)", value: 600 },
        { label: "ÍµµÍ≤å (700)", value: 700 },
        { label: "Îß§Ïö∞ÍµµÍ≤å (900)", value: 900 }
      ]
    },
    textAlign: {
      type: "radio", 
      label: "üìç Ï†ïÎ†¨",
      options: [
        { label: "‚¨ÖÔ∏è ÏôºÏ™Ω", value: "left" },
        { label: "üéØ Í∞ÄÏö¥Îç∞", value: "center" },
        { label: "‚û°Ô∏è Ïò§Î•∏Ï™Ω", value: "right" }
      ]
    }
  },
  defaultProps: {
    text: "ÏÉà ÌÖçÏä§Ìä∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî...",
    format: "plain",
    fontSize: 16,
    color: "#000000",
    letterSpacing: 0,
    lineHeight: 1.5,
    fontWeight: 400,
    textAlign: "left"
  },
  render: ({ text, format, fontSize, color, letterSpacing, lineHeight, fontWeight, textAlign }) => {
    const block = {
      id: 'puck-text',
      type: 'text',
      content: { 
        text, 
        format, 
        fontSize: fontSize?.toString(), 
        color, 
        letterSpacing: letterSpacing?.toString(), 
        lineHeight: lineHeight?.toString(), 
        fontWeight: fontWeight?.toString(), 
        textAlign 
      }
    } as any;
    
    return <TextBlockRenderer block={block} isEditing={false} />;
  }
};

const ImageComponent: ComponentConfig<{
  images: Array<{
    id: string;
    src: string;
    alt?: string;
    caption?: string;
    width?: number;
    height?: number;
    link?: string;
    linkTarget?: '_blank' | '_self';
  }>;
  displayMode?: 'single' | 'story';
  containerWidth?: number;
  padding?: number;
  borderRadius?: number;
  aspectRatio?: string;
  imageAlign?: 'left' | 'center' | 'right';
  opacity?: number;
  rotation?: number;
  shadow?: 'none' | 'sm' | 'md' | 'lg' | 'xl';
  zIndex?: number;
  hoverEffect?: 'none' | 'scale' | 'rotate' | 'brightness' | 'blur';
}> = {
  fields: {
    displayMode: {
      type: "radio",
      label: "ÌëúÏãú Î∞©Ïãù",
      options: [
        { label: "Îã®Ïùº Ïù¥ÎØ∏ÏßÄ", value: "single" },
        { label: "Ïä§ÌÜ†Î¶¨ (Îã§Ï§ë)", value: "story" }
      ]
    },
    containerWidth: {
      type: "number",
      label: "Ïª®ÌÖåÏù¥ÎÑà ÎÑìÏù¥ (%)",
      min: 10,
      max: 100,
      step: 5
    },
    padding: {
      type: "number",
      label: "Ìå®Îî© (px)",
      min: 0,
      max: 100,
      step: 4
    },
    borderRadius: {
      type: "number",
      label: "Î™®ÏÑúÎ¶¨ Îë•Í∏ÄÍ∏∞ (px)",
      min: 0,
      max: 50,
      step: 2
    },
    aspectRatio: {
      type: "select",
      label: "Ïù¥ÎØ∏ÏßÄ ÎπÑÏú®",
      options: [
        { label: "ÏûêÎèô", value: "auto" },
        { label: "Ï†ïÏÇ¨Í∞ÅÌòï (1:1)", value: "1/1" },
        { label: "Í∞ÄÎ°úÌòï (16:9)", value: "16/9" },
        { label: "ÏÑ∏Î°úÌòï (4:5)", value: "4/5" },
        { label: "Ïù∏Ïä§ÌÉÄÍ∑∏Îû® (1:1)", value: "1/1" }
      ]
    },
    imageAlign: {
      type: "radio",
      label: "Ïù¥ÎØ∏ÏßÄ Ï†ïÎ†¨",
      options: [
        { label: "‚¨ÖÔ∏è ÏôºÏ™Ω", value: "left" },
        { label: "üéØ Í∞ÄÏö¥Îç∞", value: "center" },
        { label: "‚û°Ô∏è Ïò§Î•∏Ï™Ω", value: "right" }
      ]
    },
    opacity: {
      type: "number",
      label: "Ìà¨Î™ÖÎèÑ (%)",
      min: 0,
      max: 100,
      step: 5
    },
    rotation: {
      type: "number",
      label: "ÌöåÏ†Ñ (ÎèÑ)",
      min: -180,
      max: 180,
      step: 1
    },
    shadow: {
      type: "select",
      label: "Í∑∏Î¶ºÏûê",
      options: [
        { label: "ÏóÜÏùå", value: "none" },
        { label: "ÏûëÍ≤å", value: "sm" },
        { label: "Î≥¥ÌÜµ", value: "md" },
        { label: "ÌÅ¨Í≤å", value: "lg" },
        { label: "Îß§Ïö∞ ÌÅ¨Í≤å", value: "xl" }
      ]
    },
    zIndex: {
      type: "number",
      label: "Î†àÏù¥Ïñ¥ ÏàúÏÑú",
      min: 0,
      max: 100,
      step: 1
    },
    hoverEffect: {
      type: "select",
      label: "Ìò∏Î≤Ñ Ìö®Í≥º",
      options: [
        { label: "ÏóÜÏùå", value: "none" },
        { label: "ÌôïÎåÄ", value: "scale" },
        { label: "ÌöåÏ†Ñ", value: "rotate" },
        { label: "Î∞ùÏïÑÏßê", value: "brightness" },
        { label: "ÌùêÎ†§Ïßê", value: "blur" }
      ]
    },
    images: {
      type: "array",
      label: "Ïù¥ÎØ∏ÏßÄ Î™©Î°ù",
      arrayFields: {
        id: { type: "text", label: "ID" },
        src: { type: "text", label: "Ïù¥ÎØ∏ÏßÄ URL" },
        alt: { type: "text", label: "ÏÑ§Î™Ö (ALT)" },
        caption: { type: "text", label: "Ï∫°ÏÖò" },
        link: { type: "text", label: "ÎßÅÌÅ¨ URL" }
      }
    }
  },
  defaultProps: {
    displayMode: "single",
    images: [],
    containerWidth: 100,
    padding: 0, // Í∏∞Î≥∏ Ìå®Îî© ÏóÜÏùå - ÌéòÏù¥ÏßÄ ÍΩâ Ï∞®Í≤å
    borderRadius: 0, // Í∏∞Î≥∏ ÎùºÏö¥Îìú ÏóÜÏùå
    aspectRatio: "auto",
    imageAlign: "center",
    opacity: 100,
    rotation: 0,
    shadow: "none", // Í∏∞Î≥∏ Í∑∏Î¶ºÏûê ÏóÜÏùå
    zIndex: 1,
    hoverEffect: "none" // Í∏∞Î≥∏ Ìò∏Î≤Ñ Ìö®Í≥º ÏóÜÏùå
  },
  render: ({ images, displayMode, containerWidth, padding, borderRadius, aspectRatio, imageAlign, opacity, rotation, shadow, zIndex, hoverEffect }) => {
    // ÎÑìÏù¥Ïóê Îî∞Î•∏ ÏûêÎèô Ìå®Îî© Í≥ÑÏÇ∞ (100%Ïùº ÎïåÎäî Ìå®Îî© 0)
    const autoPadding = containerWidth === 100
      ? 0
      : Math.max(8, Math.floor((100 - containerWidth) / 4))

    const effectivePadding = padding !== undefined ? padding : autoPadding

    const block = {
      id: 'puck-image',
      type: 'image',
      content: {
        images,
        displayMode,
        containerWidth,
        padding: effectivePadding,
        borderRadius,
        aspectRatio,
        imageAlign,
        opacity,
        rotation,
        shadow,
        zIndex,
        hoverEffect
      },
      settings: {
        margin: { top: 0, bottom: 0 }
      }
    } as any;

    return <ImageBlockRenderer block={block} isEditing={false} />;
  }
};

const HeroComponent: ComponentConfig<{
  title: string;
  subtitle?: string;
  backgroundImage?: string;
  backgroundVideo?: string;
  overlay?: boolean;
  overlayOpacity?: number;
  buttons?: Array<{
    text: string;
    link: string;
    variant?: string;
    size?: string;
  }>;
}> = {
  fields: {
    title: { type: "text", label: "Ï†úÎ™©" },
    subtitle: { type: "text", label: "Î∂ÄÏ†úÎ™©" },
    backgroundImage: { type: "text", label: "Î∞∞Í≤Ω Ïù¥ÎØ∏ÏßÄ URL" },
    backgroundVideo: { type: "text", label: "Î∞∞Í≤Ω ÎèôÏòÅÏÉÅ URL" },
    overlay: { type: "radio", label: "Ïò§Î≤ÑÎ†àÏù¥", options: [
      { label: "ÏÇ¨Ïö©", value: true },
      { label: "ÏÇ¨Ïö© ÏïàÌï®", value: false }
    ]},
    overlayOpacity: { type: "number", label: "Ïò§Î≤ÑÎ†àÏù¥ Ìà¨Î™ÖÎèÑ", min: 0, max: 1, step: 0.1 },
    buttons: {
      type: "array",
      label: "Î≤ÑÌäº Î™©Î°ù",
      arrayFields: {
        text: { type: "text", label: "Î≤ÑÌäº ÌÖçÏä§Ìä∏" },
        link: { type: "text", label: "ÎßÅÌÅ¨ URL" },
        variant: { 
          type: "select", 
          label: "Ïä§ÌÉÄÏùº",
          options: [
            { label: "Í∏∞Î≥∏", value: "default" },
            { label: "ÌÖåÎëêÎ¶¨", value: "outline" },
            { label: "Ìà¨Î™Ö", value: "ghost" }
          ]
        }
      }
    }
  },
  defaultProps: {
    title: "ÏÉà ÌûàÏñ¥Î°ú ÏÑπÏÖò",
    subtitle: "Î∂ÄÏ†úÎ™©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî",
    overlay: false,
    overlayOpacity: 0.5,
    buttons: []
  },
  render: ({ title, subtitle, backgroundImage, backgroundVideo, overlay, overlayOpacity, buttons }) => {
    const block = {
      id: 'puck-hero',
      type: 'hero',
      content: { title, subtitle, backgroundImage, backgroundVideo, overlay, overlayOpacity, buttons }
    } as any;
    
    return <HeroBlockRenderer block={block} isEditing={false} />;
  }
};

const ButtonComponent: ComponentConfig<{
  text: string;
  link: string;
  variant?: 'default' | 'outline' | 'ghost';
  size?: 'sm' | 'default' | 'lg';
  alignment?: 'left' | 'center' | 'right';
  marginTop?: number;
  marginBottom?: number;
  marginLeft?: number;
  marginRight?: number;
}> = {
  fields: {
    text: { type: "text", label: "üîò Î≤ÑÌäº ÌÖçÏä§Ìä∏" },
    link: { type: "text", label: "üîó ÎßÅÌÅ¨ URL" },
    variant: {
      type: "select",
      label: "üé® Ïä§ÌÉÄÏùº",
      options: [
        { label: "üü¶ Í∏∞Î≥∏", value: "default" },
        { label: "‚ö™ ÌÖåÎëêÎ¶¨", value: "outline" },
        { label: "üëª Ìà¨Î™Ö", value: "ghost" }
      ]
    },
    size: {
      type: "select",
      label: "üìè ÌÅ¨Í∏∞", 
      options: [
        { label: "ü§è ÏûëÍ≤å", value: "sm" },
        { label: "üì¶ Î≥¥ÌÜµ", value: "default" },
        { label: "üéØ ÌÅ¨Í≤å", value: "lg" }
      ]
    },
    alignment: {
      type: "radio",
      label: "üìç Ï†ïÎ†¨",
      options: [
        { label: "‚¨ÖÔ∏è ÏôºÏ™Ω", value: "left" },
        { label: "üéØ Í∞ÄÏö¥Îç∞", value: "center" },
        { label: "‚û°Ô∏è Ïò§Î•∏Ï™Ω", value: "right" }
      ]
    },
    marginTop: {
      type: "number",
      label: "‚¨ÜÔ∏è ÏúÑ Ïó¨Î∞± (px)",
      min: 0,
      max: 100
    },
    marginBottom: {
      type: "number",
      label: "‚¨áÔ∏è ÏïÑÎûò Ïó¨Î∞± (px)",
      min: 0,
      max: 100
    },
    marginLeft: {
      type: "number",
      label: "‚¨ÖÔ∏è ÏôºÏ™Ω Ïó¨Î∞± (px)",
      min: 0,
      max: 100
    },
    marginRight: {
      type: "number",
      label: "‚û°Ô∏è Ïò§Î•∏Ï™Ω Ïó¨Î∞± (px)",
      min: 0,
      max: 100
    }
  },
  defaultProps: {
    text: "Î≤ÑÌäº",
    link: "#",
    variant: "default",
    size: "default",
    alignment: "center",
    marginTop: 0,
    marginBottom: 0,
    marginLeft: 0,
    marginRight: 0
  },
  render: ({ text, link, variant, size, alignment, marginTop, marginBottom, marginLeft, marginRight }) => {
    const block = {
      id: 'puck-button',
      type: 'button',
      content: { text, link, variant, size, alignment },
      settings: {
        padding: {
          top: marginTop || 0,
          bottom: marginBottom || 0,
          left: marginLeft || 0,
          right: marginRight || 0
        }
      }
    } as any;
    
    return <ButtonBlockRenderer block={block} isEditing={false} />;
  }
};

const SpacerComponent: ComponentConfig<{
  height: number;
}> = {
  fields: {
    height: { 
      type: "number", 
      label: "ÎÜíÏù¥ (px)",
      min: 10,
      max: 500 
    }
  },
  defaultProps: {
    height: 50
  },
  render: ({ height }) => {
    const block = {
      id: 'puck-spacer',
      type: 'spacer',
      content: { height }
    } as any;
    
    return <SpacerBlockRenderer block={block} isEditing={false} />;
  }
};

// HTML Ïª¥Ìè¨ÎÑåÌä∏ Ï∂îÍ∞Ä
// Ïª¨Îüº Î†àÏù¥ÏïÑÏõÉ Ïª¥Ìè¨ÎÑåÌä∏
const ColumnsComponent: ComponentConfig<{
  columnCount: number;
  gap: number;
  alignment: string;
}> = {
  fields: {
    columnCount: {
      type: "select",
      label: "‚öè Ïª¨Îüº Ïàò",
      options: [
        { label: "2Ïª¨Îüº", value: 2 },
        { label: "3Ïª¨Îüº", value: 3 },
        { label: "4Ïª¨Îüº", value: 4 }
      ]
    },
    gap: {
      type: "number",
      label: "üìê Í∞ÑÍ≤© (px)",
      min: 0,
      max: 48
    },
    alignment: {
      type: "select",
      label: "üéØ Ï†ïÎ†¨",
      options: [
        { label: "ÎäòÏñ¥Îú®Î¶¨Í∏∞", value: "stretch" },
        { label: "ÏÉÅÎã® Ï†ïÎ†¨", value: "start" },
        { label: "Ï§ëÏïô Ï†ïÎ†¨", value: "center" },
        { label: "ÌïòÎã® Ï†ïÎ†¨", value: "end" }
      ]
    }
  },
  defaultProps: {
    columnCount: 2,
    gap: 16,
    alignment: "stretch"
  },
  render: ({ columnCount, gap, alignment }) => {
    const block = {
      id: 'puck-columns',
      type: 'columns',
      content: {
        columnCount,
        gap,
        alignment,
        columns: Array.from({ length: columnCount }, (_, i) => ({
          id: `col-${i + 1}`,
          content: `${i + 1}Î≤àÏß∏ Ïª¨Îüº ÎÇ¥Ïö©ÏùÑ Ïó¨Í∏∞Ïóê ÏûÖÎ†•ÌïòÏÑ∏Ïöî`
        }))
      }
    } as any;

    return <ColumnsBlockRenderer block={block} isEditing={false} />;
  }
};

// Ïù¥ÎØ∏ÏßÄ Í∞§Îü¨Î¶¨ Ïª¥Ìè¨ÎÑåÌä∏
const GalleryComponent: ComponentConfig<{
  layout: string;
  columns: number;
  spacing: number;
}> = {
  fields: {
    layout: {
      type: "select",
      label: "üñºÔ∏è Î†àÏù¥ÏïÑÏõÉ",
      options: [
        { label: "Í∑∏Î¶¨Îìú", value: "grid" },
        { label: "Î≤ΩÎèåÏãù", value: "masonry" },
        { label: "Ïä¨ÎùºÏù¥Îçî", value: "slider" }
      ]
    },
    columns: {
      type: "number",
      label: "üìä Ïª¨Îüº Ïàò",
      min: 1,
      max: 6
    },
    spacing: {
      type: "number",
      label: "üìê Í∞ÑÍ≤© (px)",
      min: 0,
      max: 32
    }
  },
  defaultProps: {
    layout: "grid",
    columns: 3,
    spacing: 8
  },
  render: ({ layout, columns, spacing }) => {
    const block = {
      id: 'puck-gallery',
      type: 'gallery',
      content: {
        layout,
        columns,
        spacing,
        images: [
          {
            id: 'sample-1',
            src: 'https://images.unsplash.com/photo-1557597774-9d273605dfa9?w=400&h=300&fit=crop',
            alt: 'ÏÉòÌîå Ïù¥ÎØ∏ÏßÄ 1'
          },
          {
            id: 'sample-2',
            src: 'https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=400&h=300&fit=crop',
            alt: 'ÏÉòÌîå Ïù¥ÎØ∏ÏßÄ 2'
          }
        ]
      }
    } as any;

    return <GalleryBlockRenderer block={block} isEditing={false} />;
  }
};

const HtmlComponent: ComponentConfig<{
  html: string;
}> = {
  fields: {
    html: { 
      type: "textarea", 
      label: "HTML ÏΩîÎìú",
      placeholder: "<div>HTML ÏΩîÎìúÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî</div>"
    }
  },
  defaultProps: {
    html: "<p>HTML ÏΩîÎìúÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî</p>"
  },
  render: ({ html }) => {
    const block = {
      id: 'puck-html',
      type: 'html',
      content: { html }
    } as any;
    
    return <HtmlBlockRenderer block={block} isEditing={false} />;
  }
};

// Puck ÏÑ§Ï†ï - ÌïúÍµ≠Ïñ¥ Ïª§Ïä§ÌÑ∞ÎßàÏù¥Ïßï
export const puckConfig: Config = {
  components: {
    "ÌûàÏñ¥Î°ú ÏÑπÏÖò": HeroComponent,
    "Ïª¨Îüº Î†àÏù¥ÏïÑÏõÉ": ColumnsComponent,
    "Ïù¥ÎØ∏ÏßÄ Í∞§Îü¨Î¶¨": GalleryComponent,
    "Ï†úÎ™©": HeadingComponent,
    "ÌÖçÏä§Ìä∏": TextComponent,
    "Ïù¥ÎØ∏ÏßÄ": ImageComponent,
    "Î≤ÑÌäº": ButtonComponent,
    "Í≥µÎ∞±": SpacerComponent,
    "HTML ÏΩîÎìú": HtmlComponent,
  },
  categories: {
    layout: {
      title: "üìê Î†àÏù¥ÏïÑÏõÉ",
      components: ["ÌûàÏñ¥Î°ú ÏÑπÏÖò", "Ïª¨Îüº Î†àÏù¥ÏïÑÏõÉ", "Í≥µÎ∞±"]
    },
    content: {
      title: "üìù ÏΩòÌÖêÏ∏†",
      components: ["Ï†úÎ™©", "ÌÖçÏä§Ìä∏", "Ïù¥ÎØ∏ÏßÄ", "Ïù¥ÎØ∏ÏßÄ Í∞§Îü¨Î¶¨"]
    },
    interactive: {
      title: "üéØ Ïù∏ÌÑ∞ÎûôÌã∞Î∏å",
      components: ["Î≤ÑÌäº", "HTML ÏΩîÎìú"]
    }
  },
  root: {
    fields: {
      title: { type: "text", label: "ÌéòÏù¥ÏßÄ Ï†úÎ™©" }
    },
    defaultProps: {
      title: "ÏºÄÏñ¥Ïò® ÎûúÎî© ÌéòÏù¥ÏßÄ"
    }
  }
};
