/**
 * Enrollment Application Domain Entity
 * Core business logic for merchant enrollment process
 *
 * This entity is pure TypeScript with NO external dependencies
 * (no Prisma, no Next.js, no tRPC)
 */

export type EnrollmentStatus = 'draft' | 'submitted' | 'reviewing' | 'approved' | 'rejected'

export interface EnrollmentApplicationProps {
  id: string
  createdAt: Date
  updatedAt: Date

  // Step 1: Agreements
  agreeTerms: boolean
  agreePrivacy: boolean
  agreeMarketing: boolean
  agreeTosspay: boolean
  agreedCardCompanies?: string

  // Step 2: Business Type
  businessType: '개인사업자' | '법인사업자'

  // Step 3: Representative Info
  representativeName: string
  phoneNumber: string
  birthDate: string
  gender: 'male' | 'female'

  // Step 4: Business Info
  businessName?: string
  businessNumber?: string
  businessAddress?: string
  businessCategory?: string
  businessStartDate?: string

  // Step 5: Store Info
  storeName?: string
  storeAddress?: string
  storePhone?: string

  // Step 6-9: Financial Info
  monthlyRevenue?: number
  settlementAccount?: string
  bankName?: string
  accountHolder?: string

  // Step 10: Document URLs
  businessRegistrationUrl?: string
  idCardFrontUrl?: string
  idCardBackUrl?: string
  bankbookUrl?: string
  businessLicenseUrl?: string
  signPhotoUrl?: string
  doorClosedUrl?: string
  doorOpenUrl?: string
  interiorUrl?: string
  productUrl?: string
  businessCardUrl?: string
  corporateRegistrationUrl?: string
  shareholderListUrl?: string
  sealCertificateUrl?: string
  sealUsageUrl?: string

  // Status
  status: EnrollmentStatus
  submittedAt?: Date
  reviewedAt?: Date
  reviewerNotes?: string

  // Relations
  userId?: string
}

/**
 * EnrollmentApplication Domain Entity
 * Contains business rules and validation logic
 */
export class EnrollmentApplication {
  private constructor(private readonly props: EnrollmentApplicationProps) {}

  /**
   * Create a new draft enrollment application
   */
  static createDraft(input: {
    agreeTerms: boolean
    agreePrivacy: boolean
    agreeTosspay: boolean
    businessType: '개인사업자' | '법인사업자'
    representativeName: string
    phoneNumber: string
    birthDate: string
    gender: 'male' | 'female'
    userId?: string
  }): EnrollmentApplication {
    // Business Rule: All required agreements must be accepted
    if (!input.agreeTerms || !input.agreePrivacy || !input.agreeTosspay) {
      throw new DomainError('Required agreements must be accepted')
    }

    // Business Rule: Validate phone number format (Korean)
    if (!this.isValidPhoneNumber(input.phoneNumber)) {
      throw new DomainError('Invalid phone number format')
    }

    return new EnrollmentApplication({
      id: '', // Will be generated by infrastructure
      createdAt: new Date(),
      updatedAt: new Date(),
      agreeTerms: input.agreeTerms,
      agreePrivacy: input.agreePrivacy,
      agreeMarketing: false,
      agreeTosspay: input.agreeTosspay,
      businessType: input.businessType,
      representativeName: input.representativeName,
      phoneNumber: input.phoneNumber,
      birthDate: input.birthDate,
      gender: input.gender,
      status: 'draft',
      userId: input.userId,
    })
  }

  /**
   * Reconstruct entity from persistence
   */
  static fromPersistence(props: EnrollmentApplicationProps): EnrollmentApplication {
    return new EnrollmentApplication(props)
  }

  // Getters
  get id(): string {
    return this.props.id
  }

  get status(): EnrollmentStatus {
    return this.props.status
  }

  get representativeName(): string {
    return this.props.representativeName
  }

  get businessNumber(): string | undefined {
    return this.props.businessNumber
  }

  get userId(): string | undefined {
    return this.props.userId
  }

  /**
   * Get all properties (for persistence)
   */
  toObject(): EnrollmentApplicationProps {
    return { ...this.props }
  }

  // Business Rules

  /**
   * Business Rule: Can only submit if all required fields are filled
   */
  canSubmit(): boolean {
    if (this.props.status !== 'draft') {
      return false
    }

    // Required fields check
    const requiredFields = [
      this.props.businessName,
      this.props.businessNumber,
      this.props.businessAddress,
      this.props.storeName,
      this.props.storeAddress,
    ]

    return requiredFields.every((field) => field && field.length > 0)
  }

  /**
   * Business Rule: Submit application for review
   */
  submit(): void {
    if (!this.canSubmit()) {
      throw new DomainError('Cannot submit incomplete application')
    }

    if (this.props.status !== 'draft') {
      throw new DomainError('Only draft applications can be submitted')
    }

    this.props.status = 'submitted'
    this.props.submittedAt = new Date()
    this.props.updatedAt = new Date()
  }

  /**
   * Business Rule: Only owner or admin can update
   */
  canBeUpdatedBy(userId: string, isAdmin: boolean = false): boolean {
    if (isAdmin) return true
    if (this.props.status !== 'draft') return false
    return this.props.userId === userId
  }

  /**
   * Update application (only if draft)
   */
  update(updates: Partial<EnrollmentApplicationProps>): void {
    if (this.props.status !== 'draft') {
      throw new DomainError('Cannot update submitted application')
    }

    // Business Rule: Cannot change core agreements after creation
    if (updates.agreeTerms !== undefined ||
        updates.agreePrivacy !== undefined ||
        updates.agreeTosspay !== undefined) {
      throw new DomainError('Cannot modify agreements after creation')
    }

    // Business Rule: Validate business number format if provided
    if (updates.businessNumber && !EnrollmentApplication.isValidBusinessNumber(updates.businessNumber)) {
      throw new DomainError('Invalid business number format')
    }

    Object.assign(this.props, updates)
    this.props.updatedAt = new Date()
  }

  /**
   * Business Rule: Admin can approve application
   */
  approve(reviewerNotes?: string): void {
    if (this.props.status !== 'submitted' && this.props.status !== 'reviewing') {
      throw new DomainError('Only submitted applications can be approved')
    }

    this.props.status = 'approved'
    this.props.reviewedAt = new Date()
    this.props.reviewerNotes = reviewerNotes
    this.props.updatedAt = new Date()
  }

  /**
   * Business Rule: Admin can reject application
   */
  reject(reason: string): void {
    if (this.props.status !== 'submitted' && this.props.status !== 'reviewing') {
      throw new DomainError('Only submitted applications can be rejected')
    }

    if (!reason || reason.trim().length === 0) {
      throw new DomainError('Rejection reason is required')
    }

    this.props.status = 'rejected'
    this.props.reviewedAt = new Date()
    this.props.reviewerNotes = reason
    this.props.updatedAt = new Date()
  }

  /**
   * Business Rule: Mark as reviewing
   */
  markAsReviewing(): void {
    if (this.props.status !== 'submitted') {
      throw new DomainError('Only submitted applications can be marked as reviewing')
    }

    this.props.status = 'reviewing'
    this.props.updatedAt = new Date()
  }

  // Private validation methods

  private static isValidPhoneNumber(phone: string): boolean {
    // Korean phone number: 010-1234-5678 or 01012345678
    const phoneRegex = /^01[0-9]-?[0-9]{3,4}-?[0-9]{4}$/
    return phoneRegex.test(phone)
  }

  private static isValidBusinessNumber(number: string): boolean {
    // Korean business number: 123-45-67890
    const businessNumberRegex = /^\d{3}-\d{2}-\d{5}$/
    return businessNumberRegex.test(number)
  }
}

/**
 * Domain Error
 * Represents a business rule violation
 */
export class DomainError extends Error {
  constructor(message: string) {
    super(message)
    this.name = 'DomainError'
  }
}
